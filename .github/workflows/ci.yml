
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jobfinder_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Download spaCy model
        run: |
          python -m spacy download en_core_web_sm

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jobfinder_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> $GITHUB_ENV
          echo "DEBUG=true" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          alembic upgrade head

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=api --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy

      - name: Check code formatting with Black
        run: |
          black --check api/

      - name: Check import sorting with isort
        run: |
          isort --check-only api/

      - name: Lint with flake8
        run: |
          flake8 api/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Type check with mypy
        run: |
          mypy api/ --ignore-missing-imports || true

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint || true

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run tests (if any)
        working-directory: ./frontend
        run: npm test || echo "No tests configured"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: false
          tags: jobfinder/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: false
          tags: jobfinder/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jobfinder_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -m spacy download en_core_web_sm

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/jobfinder_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci-only" >> $GITHUB_ENV
          echo "SESSION_SECRET=test-session-secret-for-ci-only" >> $GITHUB_ENV

      - name: Run database migrations
        run: alembic upgrade head

      - name: Start API server in background
        run: |
          uvicorn api.main:app --host 0.0.0.0 --port 5000 &
          sleep 10

      - name: Run integration tests
        run: |
          curl -f http://localhost:5000/health || exit 1
          curl -f http://localhost:5000/docs || exit 1

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend, test-frontend, integration-test]
    if: failure()

    steps:
      - name: Send notification
        run: |
          echo "CI/CD Pipeline failed!"
          echo "Check the logs at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
