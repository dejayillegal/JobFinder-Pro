name: Deploy to All Platforms

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-backend-render:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'production' || github.event.inputs.environment == 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ github.event.inputs.environment == 'production' && secrets.RENDER_SERVICE_ID || secrets.RENDER_SERVICE_ID_STAGING }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  deploy-frontend-vercel:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        working-directory: frontend
        run: vercel pull --yes --environment=${{ github.event.inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        working-directory: frontend
        run: vercel build ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        working-directory: frontend
        run: vercel deploy --prebuilt ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

  post-deployment-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend-render, deploy-frontend-vercel]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Test Backend Health
        run: |
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

      - name: Test Frontend
        run: |
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Test Registration Endpoint
        run: |
          curl -X POST ${{ secrets.BACKEND_URL }}/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"TestPass123","full_name":"Test User"}' \
            || echo "Registration test completed"
