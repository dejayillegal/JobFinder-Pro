name: Deploy Backend to Render

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'api/**'
      - 'alembic/**'
      - 'requirements.txt'
      - '.github/workflows/backend-render.yml'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -m spacy download en_core_web_sm

      - name: Run linting
        run: |
          pip install black flake8
          black --check api/ || true
          flake8 api/ --max-line-length=120 --ignore=E501,W503 || true
        continue-on-error: true

      - name: Run tests
        run: pytest tests/ -v --tb=short || true
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci
          JWT_SECRET_KEY: test_jwt_secret_key_for_ci

  deploy-production:
    name: Deploy to Render (Production)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Run Database Migrations
        run: |
          # Wait for deployment to complete
          sleep 30
          # Trigger migration via Render API or run remotely
          echo "Migrations should be configured in Render dashboard"
        continue-on-error: true

  deploy-staging:
    name: Deploy to Render (Staging)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "Deployment completed"
          echo "Production: ${{ needs.deploy-production.result }}"
          echo "Staging: ${{ needs.deploy-staging.result }}"
