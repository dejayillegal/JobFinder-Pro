name: CI - Tests and Quality Checks

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          python -m spacy download en_core_web_sm

      - name: Run Black (Code Formatting)
        run: |
          pip install black
          black --check api/
        continue-on-error: true

      - name: Run Flake8 (Linting)
        run: |
          pip install flake8
          flake8 api/ --max-line-length=120 --ignore=E501,W503
        continue-on-error: true

      - name: Run MyPy (Type Checking)
        run: |
          pip install mypy
          mypy api/ --ignore-missing-imports
        continue-on-error: true

      - name: Run Tests with Coverage
        run: |
          pip install pytest pytest-cov pytest-asyncio
          pytest tests/ -v --cov=api --cov-report=xml --cov-report=html
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key_for_ci
          JWT_SECRET_KEY: test_jwt_secret_key_for_ci

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
        continue-on-error: true

      - name: Run Type Check
        working-directory: frontend
        run: npx tsc --noEmit
        continue-on-error: true

      - name: Run Tests
        working-directory: frontend
        run: npm test -- --passWithNoTests
        continue-on-error: true

      - name: Build Application
        working-directory: frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://api.example.com

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit (Python Security Linter)
        run: |
          pip install bandit
          bandit -r api/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety (Python Dependency Security)
        run: |
          pip install safety
          safety check --json
        continue-on-error: true

      - name: Run npm audit (Frontend)
        working-directory: frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk Security Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
